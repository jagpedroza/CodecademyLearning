# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages


# test function by updating damages

def convert_damages(damages):
  conversion = {"M": 1000000, "B": 1000000000}
  new_damages =[]

  for damage in damages:
    if damage == 'Damages not recorded':
     new_damages.append(damage)
    elif damage[-1] in conversion.keys():
     new_value = float(damage[:-1]) * conversion[damage[-1]]
     new_damages.append(new_value)
  return new_damages

damages_fixed = convert_damages(damages)
#print(damages_fixed)
# 2 
# Create a Table
# Create and view the hurricanes dictionary

hurricanes = {}
def create_dictionary(names, months, years,max_sustained_winds,areas_affected, damages_fixed, deaths):
  for i in range(len(names)):
    hurricanes[names[i]] = {
    'Name': names[i],
    'Month':months[i],
    'Year': years[i],
    'Max Sustained Wind':max_sustained_winds[i],
    'Areas Affected': areas_affected[i],
    'Damage': damages_fixed[i],
    'Deaths':deaths[i]}
  return hurricanes

hurricanes = create_dictionary(names, months, years,max_sustained_winds,areas_affected, damages_fixed, deaths)
#print(hurricanes["Carol"])
# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key
def hur_years (hurricanes):
  hur_by_year = {}
  for i in hurricanes:
    year = hurricanes[i]['Year']
    name = hurricanes[i]
    if year not in hur_by_year:
      hur_by_year[year] = [name]
    else:
      hur_by_year[year].append(name)
  return hur_by_year

hur_by_year = hur_years(hurricanes)
#print(hur_by_year)
# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in
def damaged_areas(hurricanes):
  dam_areas = {}
  counter = 0
  for value in hurricanes.values():
    for i in value['Areas Affected']:
      if i not in dam_areas:
        dam_areas[i] = 1
      else:
        dam_areas[i] += 1
  return dam_areas

damage_area = damaged_areas(hurricanes)
#print(damage_area)
# 5 
# Calculating Maximum Hurricane Count
def max_hur_count(damage_area):
  max_hur ={}
  max_hur_count = 0
  for k,v in damage_area.items():
    if v > max_hur_count:
      max_hur[k]= v
      max_hur_count = v
  return max_hur 

maxim_affected = max_hur_count(damage_area)
#print(maxim_affected)
# find most frequently affected area and the number of hurricanes involved in


# 6
# Calculating the Deadliest Hurricane
def deadliest_hurricane(hurricanes):
  max_mortality_cane= ""
  max_mortality = 0
  for i in hurricanes:
    if hurricanes[i]['Deaths'] >= max_mortality:
      max_mortality_cane = hurricanes[i]
      max_mortality = hurricanes[i]['Deaths']
  return max_mortality, max_mortality_cane

max_deaths, count = deadliest_hurricane(hurricanes)
#print(deadliest_hurricane(hurricanes))

# find highest mortality hurricane and the number of deaths

# 7
# Rating Hurricanes by Mortality
def rate_hurricanes(hurricanes):
  hurricanes_by_mortality = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for k,v in hurricanes.items():
    if hurricanes[k]['Deaths']>= 10000:
      hurricanes_by_mortality[4].append(v)
    elif hurricanes[k]['Deaths']>= 1000:
      hurricanes_by_mortality[3].append(v)
    elif hurricanes[k]['Deaths']>= 500:
      hurricanes_by_mortality[2].append(v)
    elif hurricanes[k]['Deaths']>= 100:
      hurricanes_by_mortality[1].append(v)
    elif hurricanes[k]['Deaths'] == 0:
      hurricanes_by_mortality[0].append(v)
  return hurricanes_by_mortality
#print(rate_hurricanes(hurricanes))
# categorize hurricanes in new dictionary with mortality severity as key


# 8 Calculating Hurricane Maximum Damage
def greatest_damage(hurricanes):
  max_damage_cane= 0
  max_damage = 0
  for i in hurricanes:
    if hurricanes[i]['Damage'] == 'Damages not recorded':
      continue
    elif hurricanes[i]['Damage'] >= max_damage:
      max_damage_cane = hurricanes[i]
      max_damage = hurricanes[i]['Damage']
  return max_damage, max_damage_cane
#print(greatest_damage(hurricanes))
# find highest damage inducing hurricane and its total cost


# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def rate_hurricanes_damage(hurricanes):
  hurricanes_by_damage = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for k,v in hurricanes.items():
    if hurricanes[k]['Damage'] == 'Damages not recorded':
      continue
    elif hurricanes[k]['Damage']>= 50000000000:
      hurricanes_by_damage[4].append(v)
    elif hurricanes[k]['Damage']>= 10000000000:
      hurricanes_by_damage[3].append(v)
    elif hurricanes[k]['Damage']>= 1000000000:
      hurricanes_by_damage[2].append(v)
    elif hurricanes[k]['Damage']>= 100000000:
      hurricanes_by_damage[1].append(v)
    elif hurricanes[k]['Damage'] == 0:
      hurricanes_by_damage[0].append(v)
  return hurricanes_by_damage
print(rate_hurricanes_damage(hurricanes))
